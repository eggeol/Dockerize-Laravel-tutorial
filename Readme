# Dockerize Laravel — Repository

This repository contains a **Dockerized Laravel application** running with PHP-FPM, Nginx, MySQL, and phpMyAdmin.

## 🗂 Repository Structure

```
laravel-testing/
├── compose.yml
├── nginx/default.conf
├── laravel/
│   ├── Dockerfile
│   ├── .env
│   ├── artisan
│   ├── composer.json
│   ├── package.json
│   ├── public/
│   ├── resources/
│   ├── routes/api.php
│   ├── app/Http/Controllers/MaController.php
│   ├── app/Models/Item.php
│   ├── app/Models/User.php
│   └── ...
└── .gitignore
```

---

## 🚀 Quick Start — Step by Step

### 1️⃣ Requirements

* Docker (Desktop or Engine)
* Docker Compose (v2+ recommended)
* Git

---

### 2️⃣ Clone or Create the Repo

If you’re starting fresh:

```bash
git init
git add .
git commit -m "Initial commit — Dockerized Laravel setup"
```

Create a GitHub repo named **dockerize-laravel**, then push:

```bash
git remote add origin https://github.com/<your-username>/dockerize-laravel.git
git branch -M main
git push -u origin main
```

---

### 3️⃣ Build and Start Containers

From the root directory (where `compose.yml` is):

```bash
docker compose -f compose.yml up -d --build
```

Then open:

* Laravel App → [http://localhost:8000](http://localhost:8000)
* phpMyAdmin → [http://localhost:8080](http://localhost:8080)

---

### 4️⃣ Setup Laravel Inside Container

Once the containers are running:

```bash
# Install dependencies
docker compose exec php composer install --no-interaction --prefer-dist --optimize-autoloader

# Generate app key
docker compose exec php php artisan key:generate

# Run migrations
docker compose exec php php artisan migrate

# Fix permissions
docker compose exec php sh -c "chown -R www-data:www-data storage bootstrap/cache && chmod -R 775 storage bootstrap/cache"
```

---

### 5️⃣ Useful Commands

```bash
# Stop all containers
docker compose -f compose.yml down

# Rebuild a specific service
docker compose -f compose.yml up -d --build php

# Access PHP container shell
docker compose exec php sh

# Run Artisan command
docker compose exec php php artisan route:list
```

---

## ⚙️ Troubleshooting

### ❌ 502 Bad Gateway

* Ensure `php-fpm` is running (`docker compose logs php`)
* Confirm `fastcgi_pass php:9000;` in `nginx/default.conf`

### ❌ Database Connection Failed

* Check `.env` → `DB_HOST=mysql`, `DB_PORT=3306`
* Inspect logs: `docker compose logs mysql`

### ❌ Permission Denied

Fix storage permissions:

```bash
docker compose exec php sh -c "chown -R www-data:www-data storage bootstrap/cache && chmod -R 775 storage bootstrap/cache"
```

### ❌ phpMyAdmin Can't Connect

* Use host: `mysql`
* Username: `root`
* Password: `root` (as defined in compose)

---

## 🧠 Tips

* Add `.env` to `.gitignore` (never push sensitive info)
* Copy `.env` as `.env.example` for sharing template
* Use named Docker networks if adding more services
* You can add GitHub Actions CI later to auto-build containers

---

## 📄 Suggested .gitignore

```
/vendor
/node_modules
/.env
/storage/*.key
/public/storage
/.idea
/.vscode
.DS_Store
```

---

## ✅ Summary

After completing the steps:

* Visit `http://localhost:8000` to see your Laravel app.
* Visit `http://localhost:8080` for phpMyAdmin.

You now have a fully **Dockerized Laravel application** ready for local development or deployment!

---

**Author:** *Generated README template for your Laravel Docker setup*
